//! A separate file just because these lookup tables are big and ugly
//!
//! The purpose here is to just list out all possible bytes and the resulting
//! output. This allows for fast writing of the packed data directly into arrays

/// Maps from byte to first base
pub const B_MAP_10: [u8; 256] = [
    78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84,
    65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84,
    78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84,
    65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84,
    78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84,
    65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84,
    78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84,
    65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84,
    78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84,
    65, 67, 71, 84, 65, 67, 71, 84, 78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84,
    78, 78, 78, 78, 65, 67, 71, 84, 65, 67, 71, 84, 65, 67, 71, 84,
];

/// Maps from byte to second base
pub const B_MAP_01: [u8; 256] = [
    78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
    78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
    78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 65, 65, 65, 65, 65, 65, 65, 65,
    65, 65, 65, 65, 65, 65, 65, 65, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 84, 84, 84, 84, 84, 84, 84, 84,
    84, 84, 84, 84, 84, 84, 84, 84, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 71, 71, 71, 71, 71, 71, 71, 71,
    71, 71, 71, 71, 71, 71, 71, 71, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
    84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
];

/// Maps from byte to first qscore
pub const Q_MAP_10: [u8; 256] = [
    35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44,
    58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70,
    35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44,
    58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70,
    35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44,
    58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70,
    35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44,
    58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70,
    35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44,
    58, 58, 58, 58, 70, 70, 70, 70, 35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70,
    35, 35, 35, 35, 44, 44, 44, 44, 58, 58, 58, 58, 70, 70, 70, 70,
];

/// Maps from byte to second qscore
pub const Q_MAP_01: [u8; 256] = [
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 44, 44, 44, 44, 44, 44, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
];
